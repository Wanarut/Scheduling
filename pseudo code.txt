SET starting_population_size to 500
    minimum_population_size to 400
    maximum_population_size to 500
    maximum_generation to 100
    sigma to 10
    n_mutate to 1

main() {
    READ tasks
    READ costs
    READ TF_constraints

    solution_size <- LENGTH(tasks)
    population <- create_population(starting_population_size, solution_size, TF_constraints)

    FOR generation FROM 0 TO maximum_generation - 1 DO
        population <- population_crossover(population)
        population <- n_point_mutation(population, n_mutate, TF_constraints)

        scores <- fitness_scores(tasks, costs, population)
        population, scores <- select_pareto_population(population, scores, minimum_population_size, maximum_population_size)
        
        WRITE scores_log(scores)
    END FOR
    
    pareto_id <- identify_pareto(scores)
    pareto <- population[pareto_id]
    scores <- scores[pareto_id]
    
    WRITE pareto
    WRITE scores
}

create_population(population_size, solution_size, constraints) {
    ARRAY population
    FOR i FROM 0 to population_size - 1 DO
        FOR j FROM 0 to solution_size - 1 DO
            check constraints[j]
            population[i, j, 0] <- RANDOM 0 to sigma    // shift day
            population[i, j, 1] <- RANDOM 0 to 1        // predecessor option
        END FOR
    END FOR

    RETURN population
}

population_crossover(population) {
    FOR i FROM 0 TO half population size - 1 DO
        parent 1 <- RANDOM(population)
        parent 2 <- RANDOM(population)

        crossover_point <- RANDOM from 1 to solution_size - 2

        offspring 1 <- parent 1[0 to crossover_point] add parent 2[crossover_point to solution_size - 1]
        offspring 2 <- parent 2[0 to crossover_point] add parent 1[crossover_point to solution_size - 1]
        
        ADD offspring 1 in population
        ADD offspring 2 in population
    END FOR
    
    RETURN population
}

n_point_mutation(population, n_point, constraints) {
    FOR i FROM 0 TO half population size - 1 DO
        solution <- population[i]
        FOR j FROM 0 TO n_point - 1 DO
            mutate_position <- RANDOM from 0 to solution_size - 1
            old_value <- solution[mutate_position]
            mutate_value <- old_value + RANDOM between -sigma to sigma
            check bound the mutate_value
        END FOR
    END FOR
    
    RETURN population
}

